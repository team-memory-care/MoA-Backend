name: "🚀 CI/CD Pipeline"

on:
  push:
    branches: [ "main" ]

env:
  DOCKER_IMAGE: moA/moA

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout 코드
      - name: "📂 Checkout repository"
        uses: actions/checkout@v3

      # 2️⃣ JDK 설정
      - name: "☕ Set up JDK 17"
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3️⃣ Gradle 빌드
      - name: "🛠️ Build with Gradle"
        run: ./gradlew build -x test

      # 4️⃣ Docker 로그인
      - name: "🔑 Log in to DockerHub"
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5️⃣ Docker 빌드 & 푸시 (루트의 ./Dockerfile 사용)
      - name: "🐳 Build and Push Docker image"
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ secrets.DOCKER_USERNAME }}/moa-backend:latest \
            --push .
  cd:
    needs: [ ci ]
    runs-on: ubuntu-latest
    env:
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    # 6️⃣ EC2에 SSH 접속해서 배포
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "~/deploy/"

      - name: "🚀 Deploy to EC2"
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: DB_URL, DB_USERNAME, DB_PASSWORD
          script: |
            cd ~/deploy
            ./deploy.sh
